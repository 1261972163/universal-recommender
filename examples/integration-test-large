#!/usr/bin/env bash

# exit on any error
set -e

echo ""
echo "Integration test for The Universal Recommender."
echo "If some step fails check that your engine.json file has been restored"
echo "or look for it in 'user-engine.json'"
echo ""

echo "Checking for needed files"
if [ ! -f examples/handmade-engine.json ]; then
    echo "File not found: examples/handmade-engine.json"
    exit 1
fi

if [ ! -f data/sample-handmade-data.txt ]; then
    echo "File not found: data/sample-handmade-data.txt"
    exit 1
fi

if [ -f user-engine.json ]; then
    echo "File user-engine.json found, this may be an error so we cannot replace engine.json"
    exit 1
fi

if [ ! -f data/integration-test-expected.txt ]; then
    echo "File not found: data/integration-test-expected.txt"
    exit 1
fi

echo ""
echo "Checking status, should exit if pio is not running."
pio status
pio app new handmade-df || true

echo ""
echo "Checking to see if handmade app exists, should exit if not."
pio app show handmade-df

echo ""
echo "Moving engine.json to user-engine.json if it exists"
cp -n engine.json user-engine.json || true

echo ""
echo "Moving examples/handmade-engine.json to engine.json for integration test."
cp examples/handmade-engine.json engine.json

echo ""
echo "Deleting handmade app data since the test is date dependent"
pio app data-delete handmade-df -f

echo ""
echo "Importing data for integration test"
# get the app ID from pio app list
APP_ID=`pio app show handmade-df | grep ID | cut -f 11 -d ' '`
echo -n "App ID: "
echo $APP_ID

echo ""
echo "Generating large random dataset"
python examples/generate_random_data.py large

echo ""
echo "Importing purchase events"
pio import --input data/input_data_purchase.json --appid $APP_ID

echo ""
echo "Importing view events"
pio import --input data/input_data_view.json --appid $APP_ID

echo ""
echo "Building and delpoying model"
pio build
START=$(date +%s)
pio train  -- --driver-memory 8g --executor-memory 8g
END=$(date +%s)
DIFF=$(( $END - $START ))
echo "Training UR took $DIFF s"
echo "Model will remain deployed after this test"
nohup pio deploy > deploy.out &
echo "Waiting 30 seconds for the server to start"
sleep 30

#echo ""
#echo "Running test query."
#./examples/multi-query-handmade.sh > test.out

#this is due bug where first query had bad results
#TODO: Investigate and squash

./examples/multi-query-handmade.sh > test.out

echo ""
echo "Restoring engine.json if is was saved"
mv user-engine.json engine.json || true 

echo ""
echo "Differences between expected and actual results, none is a passing test."
echo "Note: differences in ordering of results with the same score is allowed."
diff data/integration-test-expected.txt test.out

deploy_pid=`jps -lm | grep "onsole deploy" | cut -f 1 -d ' '`
echo "Killing the deployed test PredictionServer"
kill "$deploy_pid"



